/* tslint:disable */
/* eslint-disable */
/**
 * 45 APIs 22/05
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';


/**
 * AccesTokenApi - axios parameter creator
 * @export
 */
export const AccesTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Member Login
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlLoginPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlLoginPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/login`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccesTokenApi - functional programming interface
 * @export
 */
export const AccesTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccesTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Member Login
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlLoginPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlLoginPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccesTokenApi.baseUrlLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccesTokenApi - factory interface
 * @export
 */
export const AccesTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccesTokenApiFp(configuration)
    return {
        /**
         * 
         * @summary Member Login
         * @param {AccesTokenApiBaseUrlLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlLoginPost(requestParameters: AccesTokenApiBaseUrlLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlLoginPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlLoginPost operation in AccesTokenApi.
 * @export
 * @interface AccesTokenApiBaseUrlLoginPostRequest
 */
export interface AccesTokenApiBaseUrlLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AccesTokenApiBaseUrlLoginPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof AccesTokenApiBaseUrlLoginPost
     */
    readonly body?: object
}

/**
 * AccesTokenApi - object-oriented interface
 * @export
 * @class AccesTokenApi
 * @extends {BaseAPI}
 */
export class AccesTokenApi extends BaseAPI {
    /**
     * 
     * @summary Member Login
     * @param {AccesTokenApiBaseUrlLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccesTokenApi
     */
    public baseUrlLoginPost(requestParameters: AccesTokenApiBaseUrlLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AccesTokenApiFp(this.configuration).baseUrlLoginPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class2FAApi - axios parameter creator
 * @export
 */
export const Class2FAApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get_2fa_link/verify_order_cancel
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlV2Get2faLinkPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlV2Get2faLinkPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/v2/get_2fa_link`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class2FAApi - functional programming interface
 * @export
 */
export const Class2FAApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class2FAApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get_2fa_link/verify_order_cancel
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlV2Get2faLinkPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlV2Get2faLinkPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Class2FAApi.baseUrlV2Get2faLinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * Class2FAApi - factory interface
 * @export
 */
export const Class2FAApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class2FAApiFp(configuration)
    return {
        /**
         * 
         * @summary get_2fa_link/verify_order_cancel
         * @param {Class2FAApiBaseUrlV2Get2faLinkPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlV2Get2faLinkPost(requestParameters: Class2FAApiBaseUrlV2Get2faLinkPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlV2Get2faLinkPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlV2Get2faLinkPost operation in Class2FAApi.
 * @export
 * @interface Class2FAApiBaseUrlV2Get2faLinkPostRequest
 */
export interface Class2FAApiBaseUrlV2Get2faLinkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof Class2FAApiBaseUrlV2Get2faLinkPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof Class2FAApiBaseUrlV2Get2faLinkPost
     */
    readonly body?: object
}

/**
 * Class2FAApi - object-oriented interface
 * @export
 * @class Class2FAApi
 * @extends {BaseAPI}
 */
export class Class2FAApi extends BaseAPI {
    /**
     * 
     * @summary get_2fa_link/verify_order_cancel
     * @param {Class2FAApiBaseUrlV2Get2faLinkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAApi
     */
    public baseUrlV2Get2faLinkPost(requestParameters: Class2FAApiBaseUrlV2Get2faLinkPostRequest, options?: RawAxiosRequestConfig) {
        return Class2FAApiFp(this.configuration).baseUrlV2Get2faLinkPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MandateApi - axios parameter creator
 * @export
 */
export const MandateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary link_mandate
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlLinkMandatePost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlLinkMandatePost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/link_mandate`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary mandate_cancel
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateCancelPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlMandateCancelPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/mandate_cancel`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary mandate_delink
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateDelinkPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlMandateDelinkPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/mandate_delink`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary mandate_get
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateGetPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlMandateGetPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/mandate_get`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary mandate_list
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateListPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlMandateListPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/mandate_list`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary mandate_update
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateUpdatePost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlMandateUpdatePost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/mandate_update`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MandateApi - functional programming interface
 * @export
 */
export const MandateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MandateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary link_mandate
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlLinkMandatePost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlLinkMandatePost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.baseUrlLinkMandatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary mandate_cancel
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlMandateCancelPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlMandateCancelPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.baseUrlMandateCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary mandate_delink
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlMandateDelinkPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlMandateDelinkPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.baseUrlMandateDelinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary mandate_get
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlMandateGetPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlMandateGetPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.baseUrlMandateGetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary mandate_list
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlMandateListPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlMandateListPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.baseUrlMandateListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary mandate_update
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlMandateUpdatePost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlMandateUpdatePost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.baseUrlMandateUpdatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MandateApi - factory interface
 * @export
 */
export const MandateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MandateApiFp(configuration)
    return {
        /**
         * 
         * @summary link_mandate
         * @param {MandateApiBaseUrlLinkMandatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlLinkMandatePost(requestParameters: MandateApiBaseUrlLinkMandatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlLinkMandatePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary mandate_cancel
         * @param {MandateApiBaseUrlMandateCancelPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateCancelPost(requestParameters: MandateApiBaseUrlMandateCancelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlMandateCancelPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary mandate_delink
         * @param {MandateApiBaseUrlMandateDelinkPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateDelinkPost(requestParameters: MandateApiBaseUrlMandateDelinkPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlMandateDelinkPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary mandate_get
         * @param {MandateApiBaseUrlMandateGetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateGetPost(requestParameters: MandateApiBaseUrlMandateGetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlMandateGetPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary mandate_list
         * @param {MandateApiBaseUrlMandateListPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateListPost(requestParameters: MandateApiBaseUrlMandateListPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlMandateListPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary mandate_update
         * @param {MandateApiBaseUrlMandateUpdatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateUpdatePost(requestParameters: MandateApiBaseUrlMandateUpdatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlMandateUpdatePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlLinkMandatePost operation in MandateApi.
 * @export
 * @interface MandateApiBaseUrlLinkMandatePostRequest
 */
export interface MandateApiBaseUrlLinkMandatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof MandateApiBaseUrlLinkMandatePost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof MandateApiBaseUrlLinkMandatePost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlMandateCancelPost operation in MandateApi.
 * @export
 * @interface MandateApiBaseUrlMandateCancelPostRequest
 */
export interface MandateApiBaseUrlMandateCancelPostRequest {
    /**
     * 
     * @type {string}
     * @memberof MandateApiBaseUrlMandateCancelPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof MandateApiBaseUrlMandateCancelPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlMandateDelinkPost operation in MandateApi.
 * @export
 * @interface MandateApiBaseUrlMandateDelinkPostRequest
 */
export interface MandateApiBaseUrlMandateDelinkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof MandateApiBaseUrlMandateDelinkPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof MandateApiBaseUrlMandateDelinkPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlMandateGetPost operation in MandateApi.
 * @export
 * @interface MandateApiBaseUrlMandateGetPostRequest
 */
export interface MandateApiBaseUrlMandateGetPostRequest {
    /**
     * 
     * @type {string}
     * @memberof MandateApiBaseUrlMandateGetPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof MandateApiBaseUrlMandateGetPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlMandateListPost operation in MandateApi.
 * @export
 * @interface MandateApiBaseUrlMandateListPostRequest
 */
export interface MandateApiBaseUrlMandateListPostRequest {
    /**
     * 
     * @type {string}
     * @memberof MandateApiBaseUrlMandateListPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof MandateApiBaseUrlMandateListPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlMandateUpdatePost operation in MandateApi.
 * @export
 * @interface MandateApiBaseUrlMandateUpdatePostRequest
 */
export interface MandateApiBaseUrlMandateUpdatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof MandateApiBaseUrlMandateUpdatePost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof MandateApiBaseUrlMandateUpdatePost
     */
    readonly body?: object
}

/**
 * MandateApi - object-oriented interface
 * @export
 * @class MandateApi
 * @extends {BaseAPI}
 */
export class MandateApi extends BaseAPI {
    /**
     * 
     * @summary link_mandate
     * @param {MandateApiBaseUrlLinkMandatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public baseUrlLinkMandatePost(requestParameters: MandateApiBaseUrlLinkMandatePostRequest, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).baseUrlLinkMandatePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary mandate_cancel
     * @param {MandateApiBaseUrlMandateCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public baseUrlMandateCancelPost(requestParameters: MandateApiBaseUrlMandateCancelPostRequest, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).baseUrlMandateCancelPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary mandate_delink
     * @param {MandateApiBaseUrlMandateDelinkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public baseUrlMandateDelinkPost(requestParameters: MandateApiBaseUrlMandateDelinkPostRequest, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).baseUrlMandateDelinkPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary mandate_get
     * @param {MandateApiBaseUrlMandateGetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public baseUrlMandateGetPost(requestParameters: MandateApiBaseUrlMandateGetPostRequest, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).baseUrlMandateGetPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary mandate_list
     * @param {MandateApiBaseUrlMandateListPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public baseUrlMandateListPost(requestParameters: MandateApiBaseUrlMandateListPostRequest, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).baseUrlMandateListPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary mandate_update
     * @param {MandateApiBaseUrlMandateUpdatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public baseUrlMandateUpdatePost(requestParameters: MandateApiBaseUrlMandateUpdatePostRequest, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).baseUrlMandateUpdatePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MandateMandateRegisterApi - axios parameter creator
 * @export
 */
export const MandateMandateRegisterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary mandate_register/NACH
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateRegisterPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlMandateRegisterPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/mandate_register`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MandateMandateRegisterApi - functional programming interface
 * @export
 */
export const MandateMandateRegisterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MandateMandateRegisterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary mandate_register/NACH
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlMandateRegisterPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlMandateRegisterPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateMandateRegisterApi.baseUrlMandateRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MandateMandateRegisterApi - factory interface
 * @export
 */
export const MandateMandateRegisterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MandateMandateRegisterApiFp(configuration)
    return {
        /**
         * 
         * @summary mandate_register/NACH
         * @param {MandateMandateRegisterApiBaseUrlMandateRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMandateRegisterPost(requestParameters: MandateMandateRegisterApiBaseUrlMandateRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlMandateRegisterPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlMandateRegisterPost operation in MandateMandateRegisterApi.
 * @export
 * @interface MandateMandateRegisterApiBaseUrlMandateRegisterPostRequest
 */
export interface MandateMandateRegisterApiBaseUrlMandateRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof MandateMandateRegisterApiBaseUrlMandateRegisterPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof MandateMandateRegisterApiBaseUrlMandateRegisterPost
     */
    readonly body?: object
}

/**
 * MandateMandateRegisterApi - object-oriented interface
 * @export
 * @class MandateMandateRegisterApi
 * @extends {BaseAPI}
 */
export class MandateMandateRegisterApi extends BaseAPI {
    /**
     * 
     * @summary mandate_register/NACH
     * @param {MandateMandateRegisterApiBaseUrlMandateRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateMandateRegisterApi
     */
    public baseUrlMandateRegisterPost(requestParameters: MandateMandateRegisterApiBaseUrlMandateRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return MandateMandateRegisterApiFp(this.configuration).baseUrlMandateRegisterPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MandateMandateRegisterCsvApi - axios parameter creator
 * @export
 */
export const MandateMandateRegisterCsvApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary mandate_register_csv
         * @param {string} baseurl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseurlMandateRegisterPost: async (baseurl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseurl' is not null or undefined
            assertParamExists('baseurlMandateRegisterPost', 'baseurl', baseurl)
            const localVarPath = `//{baseurl}/mandate_register`
                .replace(`{${"baseurl"}}`, encodeURIComponent(String(baseurl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MandateMandateRegisterCsvApi - functional programming interface
 * @export
 */
export const MandateMandateRegisterCsvApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MandateMandateRegisterCsvApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary mandate_register_csv
         * @param {string} baseurl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseurlMandateRegisterPost(baseurl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseurlMandateRegisterPost(baseurl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateMandateRegisterCsvApi.baseurlMandateRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MandateMandateRegisterCsvApi - factory interface
 * @export
 */
export const MandateMandateRegisterCsvApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MandateMandateRegisterCsvApiFp(configuration)
    return {
        /**
         * 
         * @summary mandate_register_csv
         * @param {MandateMandateRegisterCsvApiBaseurlMandateRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseurlMandateRegisterPost(requestParameters: MandateMandateRegisterCsvApiBaseurlMandateRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseurlMandateRegisterPost(requestParameters.baseurl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseurlMandateRegisterPost operation in MandateMandateRegisterCsvApi.
 * @export
 * @interface MandateMandateRegisterCsvApiBaseurlMandateRegisterPostRequest
 */
export interface MandateMandateRegisterCsvApiBaseurlMandateRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof MandateMandateRegisterCsvApiBaseurlMandateRegisterPost
     */
    readonly baseurl: string

    /**
     * 
     * @type {object}
     * @memberof MandateMandateRegisterCsvApiBaseurlMandateRegisterPost
     */
    readonly body?: object
}

/**
 * MandateMandateRegisterCsvApi - object-oriented interface
 * @export
 * @class MandateMandateRegisterCsvApi
 * @extends {BaseAPI}
 */
export class MandateMandateRegisterCsvApi extends BaseAPI {
    /**
     * 
     * @summary mandate_register_csv
     * @param {MandateMandateRegisterCsvApiBaseurlMandateRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateMandateRegisterCsvApi
     */
    public baseurlMandateRegisterPost(requestParameters: MandateMandateRegisterCsvApiBaseurlMandateRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return MandateMandateRegisterCsvApiFp(this.configuration).baseurlMandateRegisterPost(requestParameters.baseurl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MasterSchemeListApi - axios parameter creator
 * @export
 */
export const MasterSchemeListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary master_scheme_list
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMasterSchemeListPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlMasterSchemeListPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/master_scheme_list`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MasterSchemeListApi - functional programming interface
 * @export
 */
export const MasterSchemeListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MasterSchemeListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary master_scheme_list
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlMasterSchemeListPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlMasterSchemeListPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterSchemeListApi.baseUrlMasterSchemeListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MasterSchemeListApi - factory interface
 * @export
 */
export const MasterSchemeListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MasterSchemeListApiFp(configuration)
    return {
        /**
         * 
         * @summary master_scheme_list
         * @param {MasterSchemeListApiBaseUrlMasterSchemeListPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlMasterSchemeListPost(requestParameters: MasterSchemeListApiBaseUrlMasterSchemeListPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlMasterSchemeListPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlMasterSchemeListPost operation in MasterSchemeListApi.
 * @export
 * @interface MasterSchemeListApiBaseUrlMasterSchemeListPostRequest
 */
export interface MasterSchemeListApiBaseUrlMasterSchemeListPostRequest {
    /**
     * 
     * @type {string}
     * @memberof MasterSchemeListApiBaseUrlMasterSchemeListPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof MasterSchemeListApiBaseUrlMasterSchemeListPost
     */
    readonly body?: object
}

/**
 * MasterSchemeListApi - object-oriented interface
 * @export
 * @class MasterSchemeListApi
 * @extends {BaseAPI}
 */
export class MasterSchemeListApi extends BaseAPI {
    /**
     * 
     * @summary master_scheme_list
     * @param {MasterSchemeListApiBaseUrlMasterSchemeListPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterSchemeListApi
     */
    public baseUrlMasterSchemeListPost(requestParameters: MasterSchemeListApiBaseUrlMasterSchemeListPostRequest, options?: RawAxiosRequestConfig) {
        return MasterSchemeListApiFp(this.configuration).baseUrlMasterSchemeListPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NAVApi - axios parameter creator
 * @export
 */
export const NAVApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary nav_master_list
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlNavMasterListPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlNavMasterListPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/nav_master_list`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NAVApi - functional programming interface
 * @export
 */
export const NAVApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NAVApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary nav_master_list
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlNavMasterListPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlNavMasterListPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NAVApi.baseUrlNavMasterListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NAVApi - factory interface
 * @export
 */
export const NAVApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NAVApiFp(configuration)
    return {
        /**
         * 
         * @summary nav_master_list
         * @param {NAVApiBaseUrlNavMasterListPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlNavMasterListPost(requestParameters: NAVApiBaseUrlNavMasterListPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlNavMasterListPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlNavMasterListPost operation in NAVApi.
 * @export
 * @interface NAVApiBaseUrlNavMasterListPostRequest
 */
export interface NAVApiBaseUrlNavMasterListPostRequest {
    /**
     * 
     * @type {string}
     * @memberof NAVApiBaseUrlNavMasterListPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof NAVApiBaseUrlNavMasterListPost
     */
    readonly body?: object
}

/**
 * NAVApi - object-oriented interface
 * @export
 * @class NAVApi
 * @extends {BaseAPI}
 */
export class NAVApi extends BaseAPI {
    /**
     * 
     * @summary nav_master_list
     * @param {NAVApiBaseUrlNavMasterListPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NAVApi
     */
    public baseUrlNavMasterListPost(requestParameters: NAVApiBaseUrlNavMasterListPostRequest, options?: RawAxiosRequestConfig) {
        return NAVApiFp(this.configuration).baseUrlNavMasterListPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NFTCAMSApi - axios parameter creator
 * @export
 */
export const NFTCAMSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary bank_account_change
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlNftBankAccountChangePost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlNftBankAccountChangePost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/nft_bank_account_change`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary contact_change
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlNftContactChangePost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlNftContactChangePost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/nft_contact_change`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary nomine_change
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlNftNomineeChangePost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlNftNomineeChangePost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/nft_nominee_change`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NFTCAMSApi - functional programming interface
 * @export
 */
export const NFTCAMSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NFTCAMSApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary bank_account_change
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlNftBankAccountChangePost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlNftBankAccountChangePost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NFTCAMSApi.baseUrlNftBankAccountChangePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary contact_change
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlNftContactChangePost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlNftContactChangePost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NFTCAMSApi.baseUrlNftContactChangePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary nomine_change
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlNftNomineeChangePost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlNftNomineeChangePost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NFTCAMSApi.baseUrlNftNomineeChangePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NFTCAMSApi - factory interface
 * @export
 */
export const NFTCAMSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NFTCAMSApiFp(configuration)
    return {
        /**
         * 
         * @summary bank_account_change
         * @param {NFTCAMSApiBaseUrlNftBankAccountChangePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlNftBankAccountChangePost(requestParameters: NFTCAMSApiBaseUrlNftBankAccountChangePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlNftBankAccountChangePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary contact_change
         * @param {NFTCAMSApiBaseUrlNftContactChangePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlNftContactChangePost(requestParameters: NFTCAMSApiBaseUrlNftContactChangePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlNftContactChangePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary nomine_change
         * @param {NFTCAMSApiBaseUrlNftNomineeChangePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlNftNomineeChangePost(requestParameters: NFTCAMSApiBaseUrlNftNomineeChangePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlNftNomineeChangePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlNftBankAccountChangePost operation in NFTCAMSApi.
 * @export
 * @interface NFTCAMSApiBaseUrlNftBankAccountChangePostRequest
 */
export interface NFTCAMSApiBaseUrlNftBankAccountChangePostRequest {
    /**
     * 
     * @type {string}
     * @memberof NFTCAMSApiBaseUrlNftBankAccountChangePost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof NFTCAMSApiBaseUrlNftBankAccountChangePost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlNftContactChangePost operation in NFTCAMSApi.
 * @export
 * @interface NFTCAMSApiBaseUrlNftContactChangePostRequest
 */
export interface NFTCAMSApiBaseUrlNftContactChangePostRequest {
    /**
     * 
     * @type {string}
     * @memberof NFTCAMSApiBaseUrlNftContactChangePost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof NFTCAMSApiBaseUrlNftContactChangePost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlNftNomineeChangePost operation in NFTCAMSApi.
 * @export
 * @interface NFTCAMSApiBaseUrlNftNomineeChangePostRequest
 */
export interface NFTCAMSApiBaseUrlNftNomineeChangePostRequest {
    /**
     * 
     * @type {string}
     * @memberof NFTCAMSApiBaseUrlNftNomineeChangePost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof NFTCAMSApiBaseUrlNftNomineeChangePost
     */
    readonly body?: object
}

/**
 * NFTCAMSApi - object-oriented interface
 * @export
 * @class NFTCAMSApi
 * @extends {BaseAPI}
 */
export class NFTCAMSApi extends BaseAPI {
    /**
     * 
     * @summary bank_account_change
     * @param {NFTCAMSApiBaseUrlNftBankAccountChangePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTCAMSApi
     */
    public baseUrlNftBankAccountChangePost(requestParameters: NFTCAMSApiBaseUrlNftBankAccountChangePostRequest, options?: RawAxiosRequestConfig) {
        return NFTCAMSApiFp(this.configuration).baseUrlNftBankAccountChangePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary contact_change
     * @param {NFTCAMSApiBaseUrlNftContactChangePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTCAMSApi
     */
    public baseUrlNftContactChangePost(requestParameters: NFTCAMSApiBaseUrlNftContactChangePostRequest, options?: RawAxiosRequestConfig) {
        return NFTCAMSApiFp(this.configuration).baseUrlNftContactChangePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary nomine_change
     * @param {NFTCAMSApiBaseUrlNftNomineeChangePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTCAMSApi
     */
    public baseUrlNftNomineeChangePost(requestParameters: NFTCAMSApiBaseUrlNftNomineeChangePostRequest, options?: RawAxiosRequestConfig) {
        return NFTCAMSApiFp(this.configuration).baseUrlNftNomineeChangePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderManagerApi - axios parameter creator
 * @export
 */
export const OrderManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get_payment_detail
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlGetPaymentDetailPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlGetPaymentDetailPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/get_payment_detail`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list_payment_detail
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlListPaymentDetailPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlListPaymentDetailPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/list_payment_detail`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary order_cancel
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlOrderCancelPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlOrderCancelPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/order_cancel`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary order_get
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlOrderGetPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlOrderGetPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/order_get`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary order_list
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlOrderListPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlOrderListPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/order_list`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderManagerApi - functional programming interface
 * @export
 */
export const OrderManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get_payment_detail
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlGetPaymentDetailPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlGetPaymentDetailPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagerApi.baseUrlGetPaymentDetailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary list_payment_detail
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlListPaymentDetailPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlListPaymentDetailPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagerApi.baseUrlListPaymentDetailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary order_cancel
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlOrderCancelPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlOrderCancelPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagerApi.baseUrlOrderCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary order_get
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlOrderGetPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlOrderGetPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagerApi.baseUrlOrderGetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary order_list
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlOrderListPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlOrderListPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagerApi.baseUrlOrderListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderManagerApi - factory interface
 * @export
 */
export const OrderManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderManagerApiFp(configuration)
    return {
        /**
         * 
         * @summary get_payment_detail
         * @param {OrderManagerApiBaseUrlGetPaymentDetailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlGetPaymentDetailPost(requestParameters: OrderManagerApiBaseUrlGetPaymentDetailPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlGetPaymentDetailPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list_payment_detail
         * @param {OrderManagerApiBaseUrlListPaymentDetailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlListPaymentDetailPost(requestParameters: OrderManagerApiBaseUrlListPaymentDetailPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlListPaymentDetailPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary order_cancel
         * @param {OrderManagerApiBaseUrlOrderCancelPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlOrderCancelPost(requestParameters: OrderManagerApiBaseUrlOrderCancelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlOrderCancelPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary order_get
         * @param {OrderManagerApiBaseUrlOrderGetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlOrderGetPost(requestParameters: OrderManagerApiBaseUrlOrderGetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlOrderGetPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary order_list
         * @param {OrderManagerApiBaseUrlOrderListPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlOrderListPost(requestParameters: OrderManagerApiBaseUrlOrderListPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlOrderListPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlGetPaymentDetailPost operation in OrderManagerApi.
 * @export
 * @interface OrderManagerApiBaseUrlGetPaymentDetailPostRequest
 */
export interface OrderManagerApiBaseUrlGetPaymentDetailPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderManagerApiBaseUrlGetPaymentDetailPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof OrderManagerApiBaseUrlGetPaymentDetailPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlListPaymentDetailPost operation in OrderManagerApi.
 * @export
 * @interface OrderManagerApiBaseUrlListPaymentDetailPostRequest
 */
export interface OrderManagerApiBaseUrlListPaymentDetailPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderManagerApiBaseUrlListPaymentDetailPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof OrderManagerApiBaseUrlListPaymentDetailPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlOrderCancelPost operation in OrderManagerApi.
 * @export
 * @interface OrderManagerApiBaseUrlOrderCancelPostRequest
 */
export interface OrderManagerApiBaseUrlOrderCancelPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderManagerApiBaseUrlOrderCancelPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof OrderManagerApiBaseUrlOrderCancelPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlOrderGetPost operation in OrderManagerApi.
 * @export
 * @interface OrderManagerApiBaseUrlOrderGetPostRequest
 */
export interface OrderManagerApiBaseUrlOrderGetPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderManagerApiBaseUrlOrderGetPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof OrderManagerApiBaseUrlOrderGetPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlOrderListPost operation in OrderManagerApi.
 * @export
 * @interface OrderManagerApiBaseUrlOrderListPostRequest
 */
export interface OrderManagerApiBaseUrlOrderListPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderManagerApiBaseUrlOrderListPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof OrderManagerApiBaseUrlOrderListPost
     */
    readonly body?: object
}

/**
 * OrderManagerApi - object-oriented interface
 * @export
 * @class OrderManagerApi
 * @extends {BaseAPI}
 */
export class OrderManagerApi extends BaseAPI {
    /**
     * 
     * @summary get_payment_detail
     * @param {OrderManagerApiBaseUrlGetPaymentDetailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagerApi
     */
    public baseUrlGetPaymentDetailPost(requestParameters: OrderManagerApiBaseUrlGetPaymentDetailPostRequest, options?: RawAxiosRequestConfig) {
        return OrderManagerApiFp(this.configuration).baseUrlGetPaymentDetailPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list_payment_detail
     * @param {OrderManagerApiBaseUrlListPaymentDetailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagerApi
     */
    public baseUrlListPaymentDetailPost(requestParameters: OrderManagerApiBaseUrlListPaymentDetailPostRequest, options?: RawAxiosRequestConfig) {
        return OrderManagerApiFp(this.configuration).baseUrlListPaymentDetailPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary order_cancel
     * @param {OrderManagerApiBaseUrlOrderCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagerApi
     */
    public baseUrlOrderCancelPost(requestParameters: OrderManagerApiBaseUrlOrderCancelPostRequest, options?: RawAxiosRequestConfig) {
        return OrderManagerApiFp(this.configuration).baseUrlOrderCancelPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary order_get
     * @param {OrderManagerApiBaseUrlOrderGetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagerApi
     */
    public baseUrlOrderGetPost(requestParameters: OrderManagerApiBaseUrlOrderGetPostRequest, options?: RawAxiosRequestConfig) {
        return OrderManagerApiFp(this.configuration).baseUrlOrderGetPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary order_list
     * @param {OrderManagerApiBaseUrlOrderListPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagerApi
     */
    public baseUrlOrderListPost(requestParameters: OrderManagerApiBaseUrlOrderListPostRequest, options?: RawAxiosRequestConfig) {
        return OrderManagerApiFp(this.configuration).baseUrlOrderListPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderManagerOrderNewApi - axios parameter creator
 * @export
 */
export const OrderManagerOrderNewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary order_new_switch
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlOrderNewPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlOrderNewPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/order_new`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderManagerOrderNewApi - functional programming interface
 * @export
 */
export const OrderManagerOrderNewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderManagerOrderNewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary order_new_switch
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlOrderNewPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlOrderNewPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagerOrderNewApi.baseUrlOrderNewPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderManagerOrderNewApi - factory interface
 * @export
 */
export const OrderManagerOrderNewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderManagerOrderNewApiFp(configuration)
    return {
        /**
         * 
         * @summary order_new_switch
         * @param {OrderManagerOrderNewApiBaseUrlOrderNewPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlOrderNewPost(requestParameters: OrderManagerOrderNewApiBaseUrlOrderNewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlOrderNewPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlOrderNewPost operation in OrderManagerOrderNewApi.
 * @export
 * @interface OrderManagerOrderNewApiBaseUrlOrderNewPostRequest
 */
export interface OrderManagerOrderNewApiBaseUrlOrderNewPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderManagerOrderNewApiBaseUrlOrderNewPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof OrderManagerOrderNewApiBaseUrlOrderNewPost
     */
    readonly body?: object
}

/**
 * OrderManagerOrderNewApi - object-oriented interface
 * @export
 * @class OrderManagerOrderNewApi
 * @extends {BaseAPI}
 */
export class OrderManagerOrderNewApi extends BaseAPI {
    /**
     * 
     * @summary order_new_switch
     * @param {OrderManagerOrderNewApiBaseUrlOrderNewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagerOrderNewApi
     */
    public baseUrlOrderNewPost(requestParameters: OrderManagerOrderNewApiBaseUrlOrderNewPostRequest, options?: RawAxiosRequestConfig) {
        return OrderManagerOrderNewApiFp(this.configuration).baseUrlOrderNewPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderManagerOrderUpdateApi - axios parameter creator
 * @export
 */
export const OrderManagerOrderUpdateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary order_update_purchase
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlOrderUpdatePost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlOrderUpdatePost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/order_update`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderManagerOrderUpdateApi - functional programming interface
 * @export
 */
export const OrderManagerOrderUpdateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderManagerOrderUpdateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary order_update_purchase
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlOrderUpdatePost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlOrderUpdatePost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagerOrderUpdateApi.baseUrlOrderUpdatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderManagerOrderUpdateApi - factory interface
 * @export
 */
export const OrderManagerOrderUpdateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderManagerOrderUpdateApiFp(configuration)
    return {
        /**
         * 
         * @summary order_update_purchase
         * @param {OrderManagerOrderUpdateApiBaseUrlOrderUpdatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlOrderUpdatePost(requestParameters: OrderManagerOrderUpdateApiBaseUrlOrderUpdatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlOrderUpdatePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlOrderUpdatePost operation in OrderManagerOrderUpdateApi.
 * @export
 * @interface OrderManagerOrderUpdateApiBaseUrlOrderUpdatePostRequest
 */
export interface OrderManagerOrderUpdateApiBaseUrlOrderUpdatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderManagerOrderUpdateApiBaseUrlOrderUpdatePost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof OrderManagerOrderUpdateApiBaseUrlOrderUpdatePost
     */
    readonly body?: object
}

/**
 * OrderManagerOrderUpdateApi - object-oriented interface
 * @export
 * @class OrderManagerOrderUpdateApi
 * @extends {BaseAPI}
 */
export class OrderManagerOrderUpdateApi extends BaseAPI {
    /**
     * 
     * @summary order_update_purchase
     * @param {OrderManagerOrderUpdateApiBaseUrlOrderUpdatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagerOrderUpdateApi
     */
    public baseUrlOrderUpdatePost(requestParameters: OrderManagerOrderUpdateApiBaseUrlOrderUpdatePostRequest, options?: RawAxiosRequestConfig) {
        return OrderManagerOrderUpdateApiFp(this.configuration).baseUrlOrderUpdatePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentGatewayApi - axios parameter creator
 * @export
 */
export const PaymentGatewayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get_exchpg_service
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlGetExchpgServicePost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlGetExchpgServicePost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/get_exchpg_service`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary send_payment_info
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSendPaymentInfoPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlSendPaymentInfoPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/send_payment_info`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentGatewayApi - functional programming interface
 * @export
 */
export const PaymentGatewayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentGatewayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get_exchpg_service
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlGetExchpgServicePost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlGetExchpgServicePost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentGatewayApi.baseUrlGetExchpgServicePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary send_payment_info
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlSendPaymentInfoPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlSendPaymentInfoPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentGatewayApi.baseUrlSendPaymentInfoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentGatewayApi - factory interface
 * @export
 */
export const PaymentGatewayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentGatewayApiFp(configuration)
    return {
        /**
         * 
         * @summary get_exchpg_service
         * @param {PaymentGatewayApiBaseUrlGetExchpgServicePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlGetExchpgServicePost(requestParameters: PaymentGatewayApiBaseUrlGetExchpgServicePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlGetExchpgServicePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary send_payment_info
         * @param {PaymentGatewayApiBaseUrlSendPaymentInfoPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSendPaymentInfoPost(requestParameters: PaymentGatewayApiBaseUrlSendPaymentInfoPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlSendPaymentInfoPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlGetExchpgServicePost operation in PaymentGatewayApi.
 * @export
 * @interface PaymentGatewayApiBaseUrlGetExchpgServicePostRequest
 */
export interface PaymentGatewayApiBaseUrlGetExchpgServicePostRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentGatewayApiBaseUrlGetExchpgServicePost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof PaymentGatewayApiBaseUrlGetExchpgServicePost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlSendPaymentInfoPost operation in PaymentGatewayApi.
 * @export
 * @interface PaymentGatewayApiBaseUrlSendPaymentInfoPostRequest
 */
export interface PaymentGatewayApiBaseUrlSendPaymentInfoPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentGatewayApiBaseUrlSendPaymentInfoPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof PaymentGatewayApiBaseUrlSendPaymentInfoPost
     */
    readonly body?: object
}

/**
 * PaymentGatewayApi - object-oriented interface
 * @export
 * @class PaymentGatewayApi
 * @extends {BaseAPI}
 */
export class PaymentGatewayApi extends BaseAPI {
    /**
     * 
     * @summary get_exchpg_service
     * @param {PaymentGatewayApiBaseUrlGetExchpgServicePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApi
     */
    public baseUrlGetExchpgServicePost(requestParameters: PaymentGatewayApiBaseUrlGetExchpgServicePostRequest, options?: RawAxiosRequestConfig) {
        return PaymentGatewayApiFp(this.configuration).baseUrlGetExchpgServicePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary send_payment_info
     * @param {PaymentGatewayApiBaseUrlSendPaymentInfoPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApi
     */
    public baseUrlSendPaymentInfoPost(requestParameters: PaymentGatewayApiBaseUrlSendPaymentInfoPostRequest, options?: RawAxiosRequestConfig) {
        return PaymentGatewayApiFp(this.configuration).baseUrlSendPaymentInfoPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentManagerApi - axios parameter creator
 * @export
 */
export const PaymentManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get_mis_detail
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlGetMisDetailPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlGetMisDetailPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/get_mis_detail`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary upload_mis_csv
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlUploadMisPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlUploadMisPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/upload_mis`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentManagerApi - functional programming interface
 * @export
 */
export const PaymentManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get_mis_detail
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlGetMisDetailPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlGetMisDetailPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentManagerApi.baseUrlGetMisDetailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary upload_mis_csv
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlUploadMisPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlUploadMisPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentManagerApi.baseUrlUploadMisPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentManagerApi - factory interface
 * @export
 */
export const PaymentManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentManagerApiFp(configuration)
    return {
        /**
         * 
         * @summary get_mis_detail
         * @param {PaymentManagerApiBaseUrlGetMisDetailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlGetMisDetailPost(requestParameters: PaymentManagerApiBaseUrlGetMisDetailPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlGetMisDetailPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary upload_mis_csv
         * @param {PaymentManagerApiBaseUrlUploadMisPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlUploadMisPost(requestParameters: PaymentManagerApiBaseUrlUploadMisPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlUploadMisPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlGetMisDetailPost operation in PaymentManagerApi.
 * @export
 * @interface PaymentManagerApiBaseUrlGetMisDetailPostRequest
 */
export interface PaymentManagerApiBaseUrlGetMisDetailPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentManagerApiBaseUrlGetMisDetailPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof PaymentManagerApiBaseUrlGetMisDetailPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlUploadMisPost operation in PaymentManagerApi.
 * @export
 * @interface PaymentManagerApiBaseUrlUploadMisPostRequest
 */
export interface PaymentManagerApiBaseUrlUploadMisPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentManagerApiBaseUrlUploadMisPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof PaymentManagerApiBaseUrlUploadMisPost
     */
    readonly body?: object
}

/**
 * PaymentManagerApi - object-oriented interface
 * @export
 * @class PaymentManagerApi
 * @extends {BaseAPI}
 */
export class PaymentManagerApi extends BaseAPI {
    /**
     * 
     * @summary get_mis_detail
     * @param {PaymentManagerApiBaseUrlGetMisDetailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagerApi
     */
    public baseUrlGetMisDetailPost(requestParameters: PaymentManagerApiBaseUrlGetMisDetailPostRequest, options?: RawAxiosRequestConfig) {
        return PaymentManagerApiFp(this.configuration).baseUrlGetMisDetailPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary upload_mis_csv
     * @param {PaymentManagerApiBaseUrlUploadMisPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentManagerApi
     */
    public baseUrlUploadMisPost(requestParameters: PaymentManagerApiBaseUrlUploadMisPostRequest, options?: RawAxiosRequestConfig) {
        return PaymentManagerApiFp(this.configuration).baseUrlUploadMisPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystematicOrdersEngineApi - axios parameter creator
 * @export
 */
export const SystematicOrdersEngineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sxp_cancel
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpCancelPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlSxpCancelPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/sxp_cancel`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sxp_get_history
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpGetHistoryPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlSxpGetHistoryPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/sxp_get_history`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sxp_get
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpGetPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlSxpGetPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/sxp_get`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sxp_list
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpListPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlSxpListPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/sxp_list`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sxp_resume
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpResumePost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlSxpResumePost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/sxp_resume`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sxp_set_pause
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpSetPausePost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlSxpSetPausePost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/sxp_set_pause`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sxp_topup
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpTopupPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlSxpTopupPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/sxp_topup`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystematicOrdersEngineApi - functional programming interface
 * @export
 */
export const SystematicOrdersEngineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystematicOrdersEngineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary sxp_cancel
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlSxpCancelPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlSxpCancelPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystematicOrdersEngineApi.baseUrlSxpCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary sxp_get_history
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlSxpGetHistoryPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlSxpGetHistoryPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystematicOrdersEngineApi.baseUrlSxpGetHistoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary sxp_get
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlSxpGetPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlSxpGetPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystematicOrdersEngineApi.baseUrlSxpGetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary sxp_list
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlSxpListPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlSxpListPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystematicOrdersEngineApi.baseUrlSxpListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary sxp_resume
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlSxpResumePost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlSxpResumePost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystematicOrdersEngineApi.baseUrlSxpResumePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary sxp_set_pause
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlSxpSetPausePost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlSxpSetPausePost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystematicOrdersEngineApi.baseUrlSxpSetPausePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary sxp_topup
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlSxpTopupPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlSxpTopupPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystematicOrdersEngineApi.baseUrlSxpTopupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystematicOrdersEngineApi - factory interface
 * @export
 */
export const SystematicOrdersEngineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystematicOrdersEngineApiFp(configuration)
    return {
        /**
         * 
         * @summary sxp_cancel
         * @param {SystematicOrdersEngineApiBaseUrlSxpCancelPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpCancelPost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpCancelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlSxpCancelPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sxp_get_history
         * @param {SystematicOrdersEngineApiBaseUrlSxpGetHistoryPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpGetHistoryPost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpGetHistoryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlSxpGetHistoryPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sxp_get
         * @param {SystematicOrdersEngineApiBaseUrlSxpGetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpGetPost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpGetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlSxpGetPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sxp_list
         * @param {SystematicOrdersEngineApiBaseUrlSxpListPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpListPost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpListPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlSxpListPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sxp_resume
         * @param {SystematicOrdersEngineApiBaseUrlSxpResumePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpResumePost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpResumePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlSxpResumePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sxp_set_pause
         * @param {SystematicOrdersEngineApiBaseUrlSxpSetPausePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpSetPausePost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpSetPausePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlSxpSetPausePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sxp_topup
         * @param {SystematicOrdersEngineApiBaseUrlSxpTopupPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpTopupPost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpTopupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlSxpTopupPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlSxpCancelPost operation in SystematicOrdersEngineApi.
 * @export
 * @interface SystematicOrdersEngineApiBaseUrlSxpCancelPostRequest
 */
export interface SystematicOrdersEngineApiBaseUrlSxpCancelPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpCancelPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpCancelPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlSxpGetHistoryPost operation in SystematicOrdersEngineApi.
 * @export
 * @interface SystematicOrdersEngineApiBaseUrlSxpGetHistoryPostRequest
 */
export interface SystematicOrdersEngineApiBaseUrlSxpGetHistoryPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpGetHistoryPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpGetHistoryPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlSxpGetPost operation in SystematicOrdersEngineApi.
 * @export
 * @interface SystematicOrdersEngineApiBaseUrlSxpGetPostRequest
 */
export interface SystematicOrdersEngineApiBaseUrlSxpGetPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpGetPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpGetPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlSxpListPost operation in SystematicOrdersEngineApi.
 * @export
 * @interface SystematicOrdersEngineApiBaseUrlSxpListPostRequest
 */
export interface SystematicOrdersEngineApiBaseUrlSxpListPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpListPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpListPost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlSxpResumePost operation in SystematicOrdersEngineApi.
 * @export
 * @interface SystematicOrdersEngineApiBaseUrlSxpResumePostRequest
 */
export interface SystematicOrdersEngineApiBaseUrlSxpResumePostRequest {
    /**
     * 
     * @type {string}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpResumePost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpResumePost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlSxpSetPausePost operation in SystematicOrdersEngineApi.
 * @export
 * @interface SystematicOrdersEngineApiBaseUrlSxpSetPausePostRequest
 */
export interface SystematicOrdersEngineApiBaseUrlSxpSetPausePostRequest {
    /**
     * 
     * @type {string}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpSetPausePost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpSetPausePost
     */
    readonly body?: object
}

/**
 * Request parameters for baseUrlSxpTopupPost operation in SystematicOrdersEngineApi.
 * @export
 * @interface SystematicOrdersEngineApiBaseUrlSxpTopupPostRequest
 */
export interface SystematicOrdersEngineApiBaseUrlSxpTopupPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpTopupPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof SystematicOrdersEngineApiBaseUrlSxpTopupPost
     */
    readonly body?: object
}

/**
 * SystematicOrdersEngineApi - object-oriented interface
 * @export
 * @class SystematicOrdersEngineApi
 * @extends {BaseAPI}
 */
export class SystematicOrdersEngineApi extends BaseAPI {
    /**
     * 
     * @summary sxp_cancel
     * @param {SystematicOrdersEngineApiBaseUrlSxpCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystematicOrdersEngineApi
     */
    public baseUrlSxpCancelPost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpCancelPostRequest, options?: RawAxiosRequestConfig) {
        return SystematicOrdersEngineApiFp(this.configuration).baseUrlSxpCancelPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sxp_get_history
     * @param {SystematicOrdersEngineApiBaseUrlSxpGetHistoryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystematicOrdersEngineApi
     */
    public baseUrlSxpGetHistoryPost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpGetHistoryPostRequest, options?: RawAxiosRequestConfig) {
        return SystematicOrdersEngineApiFp(this.configuration).baseUrlSxpGetHistoryPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sxp_get
     * @param {SystematicOrdersEngineApiBaseUrlSxpGetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystematicOrdersEngineApi
     */
    public baseUrlSxpGetPost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpGetPostRequest, options?: RawAxiosRequestConfig) {
        return SystematicOrdersEngineApiFp(this.configuration).baseUrlSxpGetPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sxp_list
     * @param {SystematicOrdersEngineApiBaseUrlSxpListPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystematicOrdersEngineApi
     */
    public baseUrlSxpListPost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpListPostRequest, options?: RawAxiosRequestConfig) {
        return SystematicOrdersEngineApiFp(this.configuration).baseUrlSxpListPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sxp_resume
     * @param {SystematicOrdersEngineApiBaseUrlSxpResumePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystematicOrdersEngineApi
     */
    public baseUrlSxpResumePost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpResumePostRequest, options?: RawAxiosRequestConfig) {
        return SystematicOrdersEngineApiFp(this.configuration).baseUrlSxpResumePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sxp_set_pause
     * @param {SystematicOrdersEngineApiBaseUrlSxpSetPausePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystematicOrdersEngineApi
     */
    public baseUrlSxpSetPausePost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpSetPausePostRequest, options?: RawAxiosRequestConfig) {
        return SystematicOrdersEngineApiFp(this.configuration).baseUrlSxpSetPausePost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sxp_topup
     * @param {SystematicOrdersEngineApiBaseUrlSxpTopupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystematicOrdersEngineApi
     */
    public baseUrlSxpTopupPost(requestParameters: SystematicOrdersEngineApiBaseUrlSxpTopupPostRequest, options?: RawAxiosRequestConfig) {
        return SystematicOrdersEngineApiFp(this.configuration).baseUrlSxpTopupPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystematicOrdersEngineSxpRegisterApi - axios parameter creator
 * @export
 */
export const SystematicOrdersEngineSxpRegisterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary stp_register
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpRegisterPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlSxpRegisterPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/sxp_register`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystematicOrdersEngineSxpRegisterApi - functional programming interface
 * @export
 */
export const SystematicOrdersEngineSxpRegisterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystematicOrdersEngineSxpRegisterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary stp_register
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlSxpRegisterPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlSxpRegisterPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystematicOrdersEngineSxpRegisterApi.baseUrlSxpRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystematicOrdersEngineSxpRegisterApi - factory interface
 * @export
 */
export const SystematicOrdersEngineSxpRegisterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystematicOrdersEngineSxpRegisterApiFp(configuration)
    return {
        /**
         * 
         * @summary stp_register
         * @param {SystematicOrdersEngineSxpRegisterApiBaseUrlSxpRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlSxpRegisterPost(requestParameters: SystematicOrdersEngineSxpRegisterApiBaseUrlSxpRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlSxpRegisterPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlSxpRegisterPost operation in SystematicOrdersEngineSxpRegisterApi.
 * @export
 * @interface SystematicOrdersEngineSxpRegisterApiBaseUrlSxpRegisterPostRequest
 */
export interface SystematicOrdersEngineSxpRegisterApiBaseUrlSxpRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SystematicOrdersEngineSxpRegisterApiBaseUrlSxpRegisterPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof SystematicOrdersEngineSxpRegisterApiBaseUrlSxpRegisterPost
     */
    readonly body?: object
}

/**
 * SystematicOrdersEngineSxpRegisterApi - object-oriented interface
 * @export
 * @class SystematicOrdersEngineSxpRegisterApi
 * @extends {BaseAPI}
 */
export class SystematicOrdersEngineSxpRegisterApi extends BaseAPI {
    /**
     * 
     * @summary stp_register
     * @param {SystematicOrdersEngineSxpRegisterApiBaseUrlSxpRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystematicOrdersEngineSxpRegisterApi
     */
    public baseUrlSxpRegisterPost(requestParameters: SystematicOrdersEngineSxpRegisterApiBaseUrlSxpRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return SystematicOrdersEngineSxpRegisterApiFp(this.configuration).baseUrlSxpRegisterPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystematicOrdersEngineSxpRegisterCsvApi - axios parameter creator
 * @export
 */
export const SystematicOrdersEngineSxpRegisterCsvApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 4. swp_register
         * @param {string} baseurl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseurlSxpRegisterPost: async (baseurl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseurl' is not null or undefined
            assertParamExists('baseurlSxpRegisterPost', 'baseurl', baseurl)
            const localVarPath = `//{baseurl}/sxp_register`
                .replace(`{${"baseurl"}}`, encodeURIComponent(String(baseurl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystematicOrdersEngineSxpRegisterCsvApi - functional programming interface
 * @export
 */
export const SystematicOrdersEngineSxpRegisterCsvApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystematicOrdersEngineSxpRegisterCsvApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 4. swp_register
         * @param {string} baseurl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseurlSxpRegisterPost(baseurl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseurlSxpRegisterPost(baseurl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystematicOrdersEngineSxpRegisterCsvApi.baseurlSxpRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystematicOrdersEngineSxpRegisterCsvApi - factory interface
 * @export
 */
export const SystematicOrdersEngineSxpRegisterCsvApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystematicOrdersEngineSxpRegisterCsvApiFp(configuration)
    return {
        /**
         * 
         * @summary 4. swp_register
         * @param {SystematicOrdersEngineSxpRegisterCsvApiBaseurlSxpRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseurlSxpRegisterPost(requestParameters: SystematicOrdersEngineSxpRegisterCsvApiBaseurlSxpRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseurlSxpRegisterPost(requestParameters.baseurl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseurlSxpRegisterPost operation in SystematicOrdersEngineSxpRegisterCsvApi.
 * @export
 * @interface SystematicOrdersEngineSxpRegisterCsvApiBaseurlSxpRegisterPostRequest
 */
export interface SystematicOrdersEngineSxpRegisterCsvApiBaseurlSxpRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SystematicOrdersEngineSxpRegisterCsvApiBaseurlSxpRegisterPost
     */
    readonly baseurl: string

    /**
     * 
     * @type {object}
     * @memberof SystematicOrdersEngineSxpRegisterCsvApiBaseurlSxpRegisterPost
     */
    readonly body?: object
}

/**
 * SystematicOrdersEngineSxpRegisterCsvApi - object-oriented interface
 * @export
 * @class SystematicOrdersEngineSxpRegisterCsvApi
 * @extends {BaseAPI}
 */
export class SystematicOrdersEngineSxpRegisterCsvApi extends BaseAPI {
    /**
     * 
     * @summary 4. swp_register
     * @param {SystematicOrdersEngineSxpRegisterCsvApiBaseurlSxpRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystematicOrdersEngineSxpRegisterCsvApi
     */
    public baseurlSxpRegisterPost(requestParameters: SystematicOrdersEngineSxpRegisterCsvApiBaseurlSxpRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return SystematicOrdersEngineSxpRegisterCsvApiFp(this.configuration).baseurlSxpRegisterPost(requestParameters.baseurl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UCC2faResendLinkApi - axios parameter creator
 * @export
 */
export const UCC2faResendLinkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 2fa_resend_link
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrl2faResendLinkPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrl2faResendLinkPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/2fa_resend_link`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UCC2faResendLinkApi - functional programming interface
 * @export
 */
export const UCC2faResendLinkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UCC2faResendLinkApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 2fa_resend_link
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrl2faResendLinkPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrl2faResendLinkPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UCC2faResendLinkApi.baseUrl2faResendLinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UCC2faResendLinkApi - factory interface
 * @export
 */
export const UCC2faResendLinkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UCC2faResendLinkApiFp(configuration)
    return {
        /**
         * 
         * @summary 2fa_resend_link
         * @param {UCC2faResendLinkApiBaseUrl2faResendLinkPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrl2faResendLinkPost(requestParameters: UCC2faResendLinkApiBaseUrl2faResendLinkPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrl2faResendLinkPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrl2faResendLinkPost operation in UCC2faResendLinkApi.
 * @export
 * @interface UCC2faResendLinkApiBaseUrl2faResendLinkPostRequest
 */
export interface UCC2faResendLinkApiBaseUrl2faResendLinkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UCC2faResendLinkApiBaseUrl2faResendLinkPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof UCC2faResendLinkApiBaseUrl2faResendLinkPost
     */
    readonly body?: object
}

/**
 * UCC2faResendLinkApi - object-oriented interface
 * @export
 * @class UCC2faResendLinkApi
 * @extends {BaseAPI}
 */
export class UCC2faResendLinkApi extends BaseAPI {
    /**
     * 
     * @summary 2fa_resend_link
     * @param {UCC2faResendLinkApiBaseUrl2faResendLinkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UCC2faResendLinkApi
     */
    public baseUrl2faResendLinkPost(requestParameters: UCC2faResendLinkApiBaseUrl2faResendLinkPostRequest, options?: RawAxiosRequestConfig) {
        return UCC2faResendLinkApiFp(this.configuration).baseUrl2faResendLinkPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UCCAddUccADDUCCCSVApi - axios parameter creator
 * @export
 */
export const UCCAddUccADDUCCCSVApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add_ucc
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlUccCsvRunnerPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlUccCsvRunnerPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/ucc_csv_runner`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UCCAddUccADDUCCCSVApi - functional programming interface
 * @export
 */
export const UCCAddUccADDUCCCSVApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UCCAddUccADDUCCCSVApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary add_ucc
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlUccCsvRunnerPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlUccCsvRunnerPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UCCAddUccADDUCCCSVApi.baseUrlUccCsvRunnerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UCCAddUccADDUCCCSVApi - factory interface
 * @export
 */
export const UCCAddUccADDUCCCSVApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UCCAddUccADDUCCCSVApiFp(configuration)
    return {
        /**
         * 
         * @summary add_ucc
         * @param {UCCAddUccADDUCCCSVApiBaseUrlUccCsvRunnerPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlUccCsvRunnerPost(requestParameters: UCCAddUccADDUCCCSVApiBaseUrlUccCsvRunnerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlUccCsvRunnerPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlUccCsvRunnerPost operation in UCCAddUccADDUCCCSVApi.
 * @export
 * @interface UCCAddUccADDUCCCSVApiBaseUrlUccCsvRunnerPostRequest
 */
export interface UCCAddUccADDUCCCSVApiBaseUrlUccCsvRunnerPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UCCAddUccADDUCCCSVApiBaseUrlUccCsvRunnerPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof UCCAddUccADDUCCCSVApiBaseUrlUccCsvRunnerPost
     */
    readonly body?: object
}

/**
 * UCCAddUccADDUCCCSVApi - object-oriented interface
 * @export
 * @class UCCAddUccADDUCCCSVApi
 * @extends {BaseAPI}
 */
export class UCCAddUccADDUCCCSVApi extends BaseAPI {
    /**
     * 
     * @summary add_ucc
     * @param {UCCAddUccADDUCCCSVApiBaseUrlUccCsvRunnerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UCCAddUccADDUCCCSVApi
     */
    public baseUrlUccCsvRunnerPost(requestParameters: UCCAddUccADDUCCCSVApiBaseUrlUccCsvRunnerPostRequest, options?: RawAxiosRequestConfig) {
        return UCCAddUccADDUCCCSVApiFp(this.configuration).baseUrlUccCsvRunnerPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UCCDeactivateUccApi - axios parameter creator
 * @export
 */
export const UCCDeactivateUccApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deactivate_ucc
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlV2UpdateUccPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlV2UpdateUccPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/v2/update_ucc`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UCCDeactivateUccApi - functional programming interface
 * @export
 */
export const UCCDeactivateUccApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UCCDeactivateUccApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary deactivate_ucc
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlV2UpdateUccPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlV2UpdateUccPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UCCDeactivateUccApi.baseUrlV2UpdateUccPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UCCDeactivateUccApi - factory interface
 * @export
 */
export const UCCDeactivateUccApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UCCDeactivateUccApiFp(configuration)
    return {
        /**
         * 
         * @summary deactivate_ucc
         * @param {UCCDeactivateUccApiBaseUrlV2UpdateUccPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlV2UpdateUccPost(requestParameters: UCCDeactivateUccApiBaseUrlV2UpdateUccPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlV2UpdateUccPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlV2UpdateUccPost operation in UCCDeactivateUccApi.
 * @export
 * @interface UCCDeactivateUccApiBaseUrlV2UpdateUccPostRequest
 */
export interface UCCDeactivateUccApiBaseUrlV2UpdateUccPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UCCDeactivateUccApiBaseUrlV2UpdateUccPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof UCCDeactivateUccApiBaseUrlV2UpdateUccPost
     */
    readonly body?: object
}

/**
 * UCCDeactivateUccApi - object-oriented interface
 * @export
 * @class UCCDeactivateUccApi
 * @extends {BaseAPI}
 */
export class UCCDeactivateUccApi extends BaseAPI {
    /**
     * 
     * @summary deactivate_ucc
     * @param {UCCDeactivateUccApiBaseUrlV2UpdateUccPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UCCDeactivateUccApi
     */
    public baseUrlV2UpdateUccPost(requestParameters: UCCDeactivateUccApiBaseUrlV2UpdateUccPostRequest, options?: RawAxiosRequestConfig) {
        return UCCDeactivateUccApiFp(this.configuration).baseUrlV2UpdateUccPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UCCGetUccApi - axios parameter creator
 * @export
 */
export const UCCGetUccApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get_ucc
         * @param {string} baseUrl 
         * @param {string} [contentType] application/json; charset&#x3D;utf-8
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlV2GetUccPost: async (baseUrl: string, contentType?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlV2GetUccPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/v2/get_ucc`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UCCGetUccApi - functional programming interface
 * @export
 */
export const UCCGetUccApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UCCGetUccApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get_ucc
         * @param {string} baseUrl 
         * @param {string} [contentType] application/json; charset&#x3D;utf-8
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlV2GetUccPost(baseUrl: string, contentType?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlV2GetUccPost(baseUrl, contentType, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UCCGetUccApi.baseUrlV2GetUccPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UCCGetUccApi - factory interface
 * @export
 */
export const UCCGetUccApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UCCGetUccApiFp(configuration)
    return {
        /**
         * 
         * @summary get_ucc
         * @param {UCCGetUccApiBaseUrlV2GetUccPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlV2GetUccPost(requestParameters: UCCGetUccApiBaseUrlV2GetUccPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlV2GetUccPost(requestParameters.baseUrl, requestParameters.contentType, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlV2GetUccPost operation in UCCGetUccApi.
 * @export
 * @interface UCCGetUccApiBaseUrlV2GetUccPostRequest
 */
export interface UCCGetUccApiBaseUrlV2GetUccPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UCCGetUccApiBaseUrlV2GetUccPost
     */
    readonly baseUrl: string

    /**
     * application/json; charset&#x3D;utf-8
     * @type {string}
     * @memberof UCCGetUccApiBaseUrlV2GetUccPost
     */
    readonly contentType?: string

    /**
     * 
     * @type {object}
     * @memberof UCCGetUccApiBaseUrlV2GetUccPost
     */
    readonly body?: object
}

/**
 * UCCGetUccApi - object-oriented interface
 * @export
 * @class UCCGetUccApi
 * @extends {BaseAPI}
 */
export class UCCGetUccApi extends BaseAPI {
    /**
     * 
     * @summary get_ucc
     * @param {UCCGetUccApiBaseUrlV2GetUccPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UCCGetUccApi
     */
    public baseUrlV2GetUccPost(requestParameters: UCCGetUccApiBaseUrlV2GetUccPostRequest, options?: RawAxiosRequestConfig) {
        return UCCGetUccApiFp(this.configuration).baseUrlV2GetUccPost(requestParameters.baseUrl, requestParameters.contentType, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UCCListUccApi - axios parameter creator
 * @export
 */
export const UCCListUccApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary list_ucc
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlV2ListUccPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlV2ListUccPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/v2/list_ucc`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UCCListUccApi - functional programming interface
 * @export
 */
export const UCCListUccApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UCCListUccApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary list_ucc
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlV2ListUccPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlV2ListUccPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UCCListUccApi.baseUrlV2ListUccPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UCCListUccApi - factory interface
 * @export
 */
export const UCCListUccApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UCCListUccApiFp(configuration)
    return {
        /**
         * 
         * @summary list_ucc
         * @param {UCCListUccApiBaseUrlV2ListUccPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlV2ListUccPost(requestParameters: UCCListUccApiBaseUrlV2ListUccPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.baseUrlV2ListUccPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlV2ListUccPost operation in UCCListUccApi.
 * @export
 * @interface UCCListUccApiBaseUrlV2ListUccPostRequest
 */
export interface UCCListUccApiBaseUrlV2ListUccPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UCCListUccApiBaseUrlV2ListUccPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof UCCListUccApiBaseUrlV2ListUccPost
     */
    readonly body?: object
}

/**
 * UCCListUccApi - object-oriented interface
 * @export
 * @class UCCListUccApi
 * @extends {BaseAPI}
 */
export class UCCListUccApi extends BaseAPI {
    /**
     * 
     * @summary list_ucc
     * @param {UCCListUccApiBaseUrlV2ListUccPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UCCListUccApi
     */
    public baseUrlV2ListUccPost(requestParameters: UCCListUccApiBaseUrlV2ListUccPostRequest, options?: RawAxiosRequestConfig) {
        return UCCListUccApiFp(this.configuration).baseUrlV2ListUccPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UCCUpdateUccUPDATEHOLDINGNATUREApi - axios parameter creator
 * @export
 */
export const UCCUpdateUccUPDATEHOLDINGNATUREApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add_ucc() INDIVIDUAL JO
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlV2AddUccPost: async (baseUrl: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseUrl' is not null or undefined
            assertParamExists('baseUrlV2AddUccPost', 'baseUrl', baseUrl)
            const localVarPath = `//{base_url}/v2/add_ucc`
                .replace(`{${"base_url"}}`, encodeURIComponent(String(baseUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UCCUpdateUccUPDATEHOLDINGNATUREApi - functional programming interface
 * @export
 */
export const UCCUpdateUccUPDATEHOLDINGNATUREApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UCCUpdateUccUPDATEHOLDINGNATUREApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary add_ucc() INDIVIDUAL JO
         * @param {string} baseUrl 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseUrlV2AddUccPost(baseUrl: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseUrlV2AddUccPost(baseUrl, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UCCUpdateUccUPDATEHOLDINGNATUREApi.baseUrlV2AddUccPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UCCUpdateUccUPDATEHOLDINGNATUREApi - factory interface
 * @export
 */
export const UCCUpdateUccUPDATEHOLDINGNATUREApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UCCUpdateUccUPDATEHOLDINGNATUREApiFp(configuration)
    return {
        /**
         * 
         * @summary add_ucc() INDIVIDUAL JO
         * @param {UCCUpdateUccUPDATEHOLDINGNATUREApiBaseUrlV2AddUccPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseUrlV2AddUccPost(requestParameters: UCCUpdateUccUPDATEHOLDINGNATUREApiBaseUrlV2AddUccPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.baseUrlV2AddUccPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for baseUrlV2AddUccPost operation in UCCUpdateUccUPDATEHOLDINGNATUREApi.
 * @export
 * @interface UCCUpdateUccUPDATEHOLDINGNATUREApiBaseUrlV2AddUccPostRequest
 */
export interface UCCUpdateUccUPDATEHOLDINGNATUREApiBaseUrlV2AddUccPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UCCUpdateUccUPDATEHOLDINGNATUREApiBaseUrlV2AddUccPost
     */
    readonly baseUrl: string

    /**
     * 
     * @type {object}
     * @memberof UCCUpdateUccUPDATEHOLDINGNATUREApiBaseUrlV2AddUccPost
     */
    readonly body?: object
}

/**
 * UCCUpdateUccUPDATEHOLDINGNATUREApi - object-oriented interface
 * @export
 * @class UCCUpdateUccUPDATEHOLDINGNATUREApi
 * @extends {BaseAPI}
 */
export class UCCUpdateUccUPDATEHOLDINGNATUREApi extends BaseAPI {
    /**
     * 
     * @summary add_ucc() INDIVIDUAL JO
     * @param {UCCUpdateUccUPDATEHOLDINGNATUREApiBaseUrlV2AddUccPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UCCUpdateUccUPDATEHOLDINGNATUREApi
     */
    public baseUrlV2AddUccPost(requestParameters: UCCUpdateUccUPDATEHOLDINGNATUREApiBaseUrlV2AddUccPostRequest, options?: RawAxiosRequestConfig) {
        return UCCUpdateUccUPDATEHOLDINGNATUREApiFp(this.configuration).baseUrlV2AddUccPost(requestParameters.baseUrl, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



